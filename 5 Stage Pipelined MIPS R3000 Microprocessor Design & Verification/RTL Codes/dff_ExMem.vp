/////////////////////////////////////////////////ExMem ///////////////////////////////////

//; use POSIX;
//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//;



module `mname` (
  input logic clk, 
  input logic rst, 
  
  output logic [31:0] ALUResult_out,
  input logic [31:0] ALUResult_in, 
  output logic [31:0]  rt_data_out,
  input logic [31:0] rt_data_in, 
  
  //output logic [31:0]  pc4_out,
  //input logic [31:0]  pc4_in,
  
	
  output logic [4:0] RegDstAddr_out,
  input logic [4:0]	RegDstAddr_in,
  
  output logic RegWrite_out,
  input logic  RegWrite_in,
  output logic MemtoReg_out,
  input logic  MemtoReg_in,
  
  output logic MemWrite_out, 
  input logic MemWrite_in,
  output logic MemRead_out,
  input logic  MemRead_in
  
 // input logic Jump_in,
 // output logic Jump_out,

);

  always_ff @(posedge clk or negedge rst)
  begin
    if (~rst) 
    begin
    ALUResult_out <= 32'd0;
    rt_data_out <= 32'd0; 
    //pc4_out <= 32'd0;
    RegDstAddr_out <= 5'd0;
    RegWrite_out <= 1'd0;
    MemtoReg_out <= 1'd0;
    MemWrite_out <= 1'd0;
    MemRead_out <= 1'd0;
    //Jump_out <= 1'd0;

	
    end 
    else
    begin
    ALUResult_out <= ALUResult_in;
    rt_data_out <= rt_data_in; 
    //pc4_out <=  pc4_in;
    RegDstAddr_out <= RegDstAddr_in;
    RegWrite_out <= RegWrite_in;
    MemtoReg_out <= MemtoReg_in;
    MemWrite_out <= MemWrite_in;
    MemRead_out <= MemRead_in;  
    //Jump_out<= Jump_in;  

    end
  end
endmodule: `mname`
