
////////////////////////////////////////RF/////////////////////////////////////
// Code your design here
// RF.vp
//; use POSIX;
//; use strict;
//; use warnings FATAL => qw(all);
//; use diagnostics;

module `mname`  (
    output logic [31:0] rpadat, // 32 bit data
    output logic [31:0] rpbdat,
    input logic [4:0] rpa_ad,  // 5 bits for 32 bit register file
    input logic [4:0] rpb_ad,
    input logic rena_a,
    input logic rena_b,
    
    input logic [31:0] wdat,
    input logic [4:0] wp_ad,
    input logic wena,
    input logic clk,
    input logic rst
    
  );
    
  
    reg [31:0] regfile [0:31]; // 32 bit register and such 32 registers
    
   
  always@(posedge clk or negedge rst)
    begin
      if(!rst)
      begin
       // regfile[1]<=32'd1;
       // regfile[2]<=32'd2;
        regfile[5]<=32'd4000;
       // regfile[6]<=32'd4;
      end
    end
  // read logic
  always_comb begin
   
    rpadat = (rpa_ad == 5'd0) ? 32'd0 : (rena_a) ? regfile[rpa_ad] : 32'd0;
    rpbdat = (rpb_ad == 5'd0) ? 32'd0 : (rena_b) ? regfile[rpb_ad]: 32'd0;
  end
  // write logic 
  
    always @ (negedge clk)
      begin 

        if (wena && wp_ad != '0) begin
      regfile[0] <= 32'b0;
      regfile[wp_ad] <= wdat;
    end
   // $display("rpadat=%d rpa_ad=%d rpbdat=%d rpb_ad=%d",rpadat, rpa_ad, rpbdat, rpb_ad);
  end

endmodule: `mname`