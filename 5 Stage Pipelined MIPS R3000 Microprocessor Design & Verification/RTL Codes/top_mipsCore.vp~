//; # top_mipsCore.vp
//;
//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//; use POSIX();

//; #Generate DUT
//; my $hW = generate_base('mipsCore', 'my_mipsCore');


//; #Pull DUT Parameters
//; my $iW   = $hW->get_param("issueWidth") ;
//; my $wl   = $hW->get_param("wordLength") ;
//; my $rP   = $hW->get_param("rfReadPorts") ;
//; my $wP   = $hW->get_param("rfWritePorts") ;
//; my $rC   = $hW->get_param("rfEntryCount") ;
//; my $rA   = $hW->get_param("rfAddressWidth") ;
//; my $btb  = $hW->get_param("enableBTB") ;
//; my $btbW = $hW->get_param("entrySizeBTB") ;
//; my $btbC = $hW->get_param("entryCountBTB") ;
//; my $mD   = $hW->get_param("MipsMode") ;


//`timescale 1ns/1ps

  module `mname`();

  // ICACHE
  logic [`$iW*$wl-1`:0] tb_iCacheReadAddr;
  logic [`$wl-1`:0] tb_iCacheReadData;

  //DCache Ifc  
  logic [`$wl-1`:0] tb_dCacheReadData;
  logic [`$wl-1`:0] tb_dCacheWriteData;
  logic [`$wl-1`:0] tb_dCacheAddr;
  logic tb_dCacheWriteEn;
  logic tb_dCacheReadEn;
  
    //Register File Ifc
  logic [`$wl-1`:0] tb_rfReadData_p0;
  logic [`$wl-1`:0] tb_rfReadData_p1;
  logic [`$rA-1`:0] tb_rfReadAddr_p0;  
  logic [`$rA-1`:0] tb_rfReadAddr_p1; 
  logic tb_rfReadEn_p0;
  logic tb_rfReadEn_p1; 
  logic [`$wl-1`:0] tb_rfWriteData_p0;
  logic [`$rA-1`:0] tb_rfWriteAddr_p0;
  logic tb_rfWriteEn_p0;
  
  /* BTB Ifc  
  logic [`$btbW-1`:0] tb_btbReadData;
  logic [`$btbW-1`:0] tb_btbWriteData;
  logic [`$wl-1`:0] tb_btbWriteAddr;
  logic [`$wl-1`:0] tb_btbRadAddr;
  logic tb_btbWriteEn;
  logic tb_btbReadEn;  */ 
  //Globals  
  logic rst;
  logic clk;
 // logic [31:0] Out;
  logic [7:0] clk_cnt;
  

  
 logic triggerStart, triggerStop; // triggerstart and stop defined globally for power calculation 

    `$hW->instantiate` ( 
                // ICACHE
                .iCacheReadData(tb_iCacheReadData),    
                .iCacheReadAddr(tb_iCacheReadAddr), 
 
                //DCache Ifc
                .dCacheReadData(tb_dCacheReadData),
                .dCacheWriteData(tb_dCacheWriteData),
                .dCacheAddr(tb_dCacheAddr),
                .dCacheWriteEn(tb_dCacheWriteEn),
                .dCacheReadEn(tb_dCacheReadEn),
				
                 //Register File Ifc
                .rfReadData_p0(tb_rfReadData_p0), 
                .rfReadAddr_p0(tb_rfReadAddr_p0),  
                .rfReadEn_p0(tb_rfReadEn_p0),    
                .rfReadData_p1 (tb_rfReadData_p1), 
                .rfReadAddr_p1(tb_rfReadAddr_p1),
                .rfReadEn_p1(tb_rfReadEn_p1),
                .rfWriteData_p0(tb_rfWriteData_p0),
                .rfWriteAddr_p0(tb_rfWriteAddr_p0),
                .rfWriteEn_p0(tb_rfWriteEn_p0),

		 /* BTB Ifc
		 .btbReadData(tb_btbReadData),
	 	 .btbWriteData(tb_btbWriteData),
		 .btbWriteAddr(tb_btbWriteAddr),
		 .btbReadAddr(tb_btbReadAddr),
		 .btbWriteEn(tb_btbWriteEn),
		 .btbReadEn(tb_btbReadEn),
		 */
		 //Globals
                .clk(clk), 
                .rst(rst)
               // .Out(Out)
               );
			 

//; my $imem=generate('IMEM','imem1');
`$imem->instantiate`(.iCacheReadAddr(tb_iCacheReadAddr),.iCacheReadData(tb_iCacheReadData)); 
	
//; my $rf=generate('RF','rf1');
`$rf->instantiate`(.rpadat(tb_rfReadData_p0), .rpbdat(tb_rfReadData_p1), .rpa_ad(tb_rfReadAddr_p0), .rpb_ad(tb_rfReadAddr_p1), .rena_a(tb_rfReadEn_p0), .rena_b(tb_rfReadEn_p1), .wdat(tb_rfWriteData_p0), .wp_ad(tb_rfWriteAddr_p0), .wena(tb_rfWriteEn_p0), .clk(clk), .rst(rst));	
	
//; my $dmem=generate('DMEM','DMEM1');
`$dmem->instantiate`(.dCacheReadData(tb_dCacheReadData), .dCacheWriteData(tb_dCacheWriteData), .dCacheAddr(tb_dCacheAddr), .dCacheWriteEn(tb_dCacheWriteEn), .dCacheReadEn(tb_dCacheReadEn), .clk(clk), .rst(rst)); 


	// Clock generation	
initial begin
    clk = 1'b0;
    clk_cnt = 8'd0 ;
    forever #1 clk = ~clk;
   // rst = 1'b0;
end
  

 // Activity Count
initial begin
	rst =1'b0;
	#20 rst = 1'b1;
	triggerStart = 1'b0;
	triggerStop = 1'b0;
	#10
	triggerStart = 1'b1;
    triggerStop = 1'b1;
  #300
  $finish();
end  


// Captures the wave
//; my $region = "my_mipsCore";
	initial begin
	// if this is a "+wave" run it must record all signals
	if($test$plusargs("wave")) begin
		$display("%t: Starting Wave Capture",$time);
		// levels, instance
		$vcdpluson(0,      `$region`);
		$vcdplusmemon(0,    `$region`);
		end
	end

	
// Activity Factor Extraction

//; my $region_1 = $self->mname();


	logic foo;

	initial begin 
	foo = 1'b0;
	#2
	//$set_gate_level_monitoring("rtl_on");
	//$set_gate_level_monitoring("mda");
	$set_gate_level_monitoring("rtl_on","sv");
	$set_gate_level_monitoring("rtl_on","mda");
	#2
	$set_toggle_region(`$region_1`);
	#2
	@(posedge triggerStart);
	$display("Starting Toggle Collection");
	$toggle_start();
	#100000000000000000000
	foo = 1'b1;
	end

initial begin

	#2
	@(posedge triggerStart);
	#2
	@(posedge triggerStop);
	$display("Stopping Toggle Collection");
	#2
	$toggle_stop();
	#2
	$toggle_report("top.saif", 1.0e-12,  `$region_1`);
	end





// Result Display 
always @ (posedge clk)
	begin
		clk_cnt <= clk_cnt + 1'b1;
//$display("clk_cnt=%d ICache: iCRdAdr=%d iCRdDat=%h DCache:dCAdr=%d dCRdDat=%h dCWDat=%h",clk_cnt, tb_iCacheReadAddr, tb_iCacheReadData, tb_dCacheAddr, tb_dCacheReadData, tb_dCacheWriteData);
//$display("clk_cnt=%d RegFile:rfRdAdr_p0=%d rfRdDat_p0=%h rfRdAdr_p1=%d rfRdDat_p1=%h rfWAdr_p0=%d rfWrDat_p0=%h",clk_cnt, tb_rfReadAddr_p0, tb_rfReadData_p0, tb_rfReadAddr_p1, tb_rfReadData_p1, tb_rfWriteAddr_p0, tb_rfWriteData_p0 );

$display("clk_cnt=%d ICache: iCRdAdr=%d iCRdDat=%h DCache:dCAdr=%d dCRdDat=%h dCWDat=%h RegFile:rfRdAdr_p0=%d rfRdDat_p0=%h rfRdAdr_p1=%d rfRdDat_p1=%h rfWAdr_p0=%d rfWrDat_p0=%h",clk_cnt, tb_iCacheReadAddr, tb_iCacheReadData, tb_dCacheAddr, tb_dCacheReadData, tb_dCacheWriteData, tb_rfReadAddr_p0, tb_rfReadData_p0, tb_rfReadAddr_p1, tb_rfReadData_p1, tb_rfWriteAddr_p0, tb_rfWriteData_p0 );







end


endmodule: `mname`



  // ICACHE
  logic [`$iW*$wl-1`:0] tb_iCacheReadAddr;
  logic [`$wl-1`:0] tb_iCacheReadData;

  //DCache Ifc  
  logic [`$wl-1`:0] tb_dCacheReadData;
  logic [`$wl-1`:0] tb_dCacheWriteData;
  logic [`$wl-1`:0] tb_dCacheAddr;
  logic tb_dCacheWriteEn;
  logic tb_dCacheReadEn;
  
    //Register File Ifc
  logic [`$wl-1`:0] tb_rfReadData_p0;
  logic [`$wl-1`:0] tb_rfReadData_p1;
  logic [`$rA-1`:0] tb_rfReadAddr_p0;  
  logic [`$rA-1`:0] tb_rfReadAddr_p1; 
  logic tb_rfReadEn_p0;
  logic tb_rfReadEn_p1; 
  logic [`$wl-1`:0] tb_rfWriteData_p0;
  logic [`$rA-1`:0] tb_rfWriteAddr_p0;
  logic tb_rfWriteEn_p0;
  
  /* BTB Ifc  
  logic [`$btbW-1`:0] tb_btbReadData;
  logic [`$btbW-1`:0] tb_btbWriteData;
  logic [`$wl-1`:0] tb_btbWriteAddr;
  logic [`$wl-1`:0] tb_btbRadAddr;
  logic tb_btbWriteEn;
  logic tb_btbReadEn;  */ 
  //Globals  
  logic rst;
  logic clk;
 // logic [31:0] Out;
  logic [7:0] clk_cnt;
  

            
