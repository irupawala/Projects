//////////////////////////////////////////IDEX FF //////////////////////////////

//; use POSIX;
//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//;



module `mname` (
  input logic clk, 
  input logic rst, 
  
  input logic [31:0] rs_data_in,
  output logic [31:0] rs_data_out,
  
  input logic [31:0] rt_data_in,
  output logic [31:0] rt_data_out,
  
  input logic [31:0] signExtended_in,
  output logic [31:0] signExtended_out,
    
  input logic [4:0] rs_add_in,
  output logic [4:0] rs_add_out,
  
  input logic [4:0] rt_add_in,
  output logic [4:0] rt_add_out,
  input logic [4:0] rd_add_in,
  output logic [4:0] rd_add_out,
  
  input logic [31:0] pc4_in,
  output logic [31:0] pc4_out,
  input logic [31:0] jump_add_in,
  output logic [31:0] jump_add_out,
  
  input logic [5:0] op_funct_in,
  output logic [5:0] op_funct_out,
  
  input logic [4:0] shiftamount_in,
  output logic [4:0] shiftamount_out,

  input logic RegWrite_in,
  output logic RegWrite_out,
  
  input logic MemWrite_in,
  output logic MemWrite_out,
  
  input logic MemRead_in,
  output logic MemRead_out,
  
  input logic MemtoReg_in,
  output logic MemtoReg_out,
	
  input logic ALUSrc_in,
  output logic ALUSrc_out,
  
  input logic Branch_in,
  output logic Branch_out,
  
  input logic Jump_in,
  output logic Jump_out,
  
  input logic BNE_in,
  output logic BNE_out,
   input logic RegDst_in,
  output logic RegDst_out,
   input logic JR_in,
  output logic JR_out,
  
  input logic SRA_in,
  output logic SRA_out,
  
  input logic [3:0]ALUOp_in,
  output logic [3:0]ALUOp_out
  
  
);
  

  always_ff @(posedge clk or negedge rst)
  begin
    if (~rst) 
    begin
      rs_data_out<= 32'd0;
      rt_data_out<=32'd0;
      signExtended_out<=32'd0;
      
      rs_add_out <= 5'd0;
      
      rt_add_out <= 5'd0;
      rd_add_out <= 5'd0;      
      pc4_out <= 32'd0;
      jump_add_out <= 32'd0;
      op_funct_out <= 5'd0;
      shiftamount_out <= 5'd0;

      
      RegWrite_out <= 1'd0;
      MemWrite_out<= 1'd0;
      MemRead_out<= 1'd0;
      MemtoReg_out<= 1'd0;
      ALUSrc_out<= 1'd0;
      Branch_out<= 1'd0;
      Jump_out<= 1'd0;
      BNE_out<= 1'd0;
      RegDst_out<= 1'd0;
      JR_out<= 1'd0;
      SRA_out<= 1'd0;
      ALUOp_out<= 4'd0;
      
    end 
    else  begin
      rs_data_out<= rs_data_in;
      rt_data_out<=rt_data_in;
      signExtended_out<=signExtended_in;
      
      rs_add_out <= rs_add_in;
      
      rt_add_out <= rt_add_in;
      rd_add_out <= rd_add_in;
      pc4_out <=pc4_in ;
      jump_add_out <= jump_add_in; // from 26 bits given and PC
      op_funct_out <= op_funct_in;
      shiftamount_out <= shiftamount_in;
      
      
      RegWrite_out <=RegWrite_in ;
      MemWrite_out<=MemWrite_in;
      MemRead_out<=MemRead_in;
      MemtoReg_out<=MemtoReg_in ;
      ALUSrc_out<=ALUSrc_in;
      Branch_out<=Branch_in;
      Jump_out<=Jump_in;
      BNE_out<= BNE_in;
      RegDst_out<=RegDst_in;
      JR_out<=JR_in;
      SRA_out<=SRA_in ;
      ALUOp_out<=ALUOp_in;
      
    end
  end
endmodule: `mname`


