
// mipsCore.vp
//; my $wl = parameter( name=>"wordLength", val=>32, doc=>"Width of input" );
//; my $iW = parameter( name=>"issueWidth", val=>1, doc=>"Number of fetched instructions" );
//; my $rP = parameter( name=>"rfReadPorts", val=>2, doc=>"Number of RF read ports" );
//; my $wP = parameter( name=>"rfWritePorts", val=>1, doc=>"Number of RF write ports" );
//; my $rC = parameter( name=>"rfEntryCount", val=>32, max=>128, doc=>"Number of RF addresses");
//; my $rA = parameter( name=>"rfAddressWidth", val=>5, max=>7 , doc=>"Bits for RF address" );
//; my $btb = parameter( name=>"enableBTB", val=>0, list=>[0,1], doc=>"Enable BTB");
//; my $btbW = parameter( name=>"entrySizeBTB", val=>34, max=>36, doc=>"BTB entry size");
//; my $btbC = parameter( name=>"entryCountBTB", val=>0, max=>256, doc=>"BTB entries");
//; my $mD = parameter( name=>"MipsMode", val=>"Fwd5", list=>["Cyc1","Cyc5","Smpl5","Fwd5","Dual"],doc=>"Iterative design state, testbench will ignore" );


module `mname` (
//ICache Ifc
input logic [`$iW*$wl-1`:0] iCacheReadData,
output logic [`$wl-1`:0] iCacheReadAddr,
//DCache Ifc
input logic [`$wl-1`:0] dCacheReadData,
output logic [`$wl-1`:0] dCacheWriteData,
output logic [`$wl-1`:0] dCacheAddr,
output logic dCacheWriteEn,
output logic dCacheReadEn,
//Register File Ifc
//; for( my $i = 0 ; $i < $rP ; $i++ ){
input logic [`$wl-1`:0] rfReadData_p`$i`,
output logic [`$rA-1`:0] rfReadAddr_p`$i`,
output logic rfReadEn_p`$i`,
//; }
//; for( my $i = 0 ; $i < $wP ; $i++ ){
output logic [`$wl-1`:0] rfWriteData_p`$i`,
output logic [`$rA-1`:0] rfWriteAddr_p`$i`,
output logic rfWriteEn_p`$i`,
//; }
//BTB Ifc
//; if( $btb ){
input logic [`$btbW-1`:0] btbReadData,
output logic [`$btbW-1`:0] btbWriteData,
output logic [`$wl-1`:0] btbWriteAddr,
output logic [`$wl-1`:0] btbReadAddr,
output logic btbWriteEn,
output logic btbReadEn,
//; }
// Globals
input logic clk,
input logic rst
);



/*
//module mipsCore (
module `mname`  
  // ICACHE
  input logic [31:0] iCacheReadData,
  output logic [31:0] iCacheReadAddr,
  //DCache Ifc
  input logic [31:0] dCacheReadData,
  output logic [31:0] dCacheWriteData,
  output logic [31:0] dCacheAddr,
  output logic dCacheWriteEn, 
  output logic dCacheReadEn, 
  //Register File Ifc
  input logic [31:0] rfReadData_p0,
  output logic [4:0] rfReadAddr_p0,
  output logic rfReadEn_p0,  
  input logic [31:0] rfReadData_p1,  
  output logic [4:0] rfReadAddr_p1, 
  output logic rfReadEn_p1, 
  output logic [31:0] rfWriteData_p0,
  output logic [4:0] rfWriteAddr_p0,
  output logic rfWriteEn_p0,
  // BTB Ifc
   input logic [33:0] btbReadData,
   output logic [33:0] btbWriteData,
   output logic [31:0] btbWriteAddr,
   output logic [31:0] btbRadAddr,
   output logic btbWriteEn,
   output logic btbReadEn,
  //Globals
  input logic clk,
  input logic rst,
  output logic [31:0] Out
);
  */

//////////////////////////////////////////// Wire Declaration /////////////////////////////////
  

//// Wires for PC
  
logic [31:0] input_pc_wire;
logic [31:0] output_pc_wire;

  
///// Wires for PC_NEXT
logic [31:0] input_next_pc_wire;
logic [31:0] output_next_pc_wire;
  
//// Wires for Deocode logic 
  
logic [31:0] instruction_wire;
logic [5:0] opcode_wire;
logic [4:0] rs_wire;
logic [4:0] rt_wire;
logic [4:0] rd_wire;  
logic [5:0] funct_wire;
logic [15:0] immediate_wire;
logic [25:0] immediate_jump_wire;
logic [4:0] shamt_wire;

/////// Wires for Control

logic [5:0] Control_in_wire;
  logic [5:0] Control_jr_wire;  
logic [3:0] ALUOp_wire;
logic RegWrite_wire;
logic MemWrite_wire;
logic MemRead_wire;
logic MemtoReg_wire;
logic ALUSrc_wire;
logic Branch_wire;
logic Jump_wire;
logic BNE_wire;
logic RegDst_wire;
logic JR_wire;
logic SRA_wire;  
logic RegReada_wire;
logic RegReadb_wire;

//////// Wires for ALUControl 

logic [5:0] ALUCtrl_in_wire;
logic [3:0] ALUOp_in_wire;
  logic [4:0] ALUCtrl_out_wire;

////////// Wires for ALU

logic [4:0] ALUCtrl_wire;
logic [31:0] ALUSrc1_wire;
logic [31:0] ALUSrc2_wire;
logic [31:0] ALUResult_wire;
logic zero_wire;


//////////////// Wires for MUX
  
  logic [31:0] input1_wire;
  logic [31:0] input2_wire;
  logic select_wire;
  logic [31:0] out_wire;
 
//////////////// Wires for SIGN EXTENDER
  
  logic [15:0] SignExtend_in_wire;
  logic [31:0] SignExtend_out_wire;
  
//////////////// Wires for AFTER ALU  

    logic [31:0] input1_ALU_wire;
    logic [31:0] input2_ALU_wire;
	logic select_ALU_wire;
    logic [31:0] out_ALU_wire;
  
//////////////// Wires for Shiftleft2 
  logic [31:0] Shiftleft2_in_wire;
  logic [31:0] Shiftleft2_out_wire;

  
//////////////// Wires for ALU_branch 

logic [31:0] ALUSrc1_branch_wire;
logic [31:0] ALUSrc2_branch_wire;
logic [31:0] ALUResult_branch_wire;

  
//////////////// Wires for MUX_2to1_branch

logic [31:0] input1_branch_wire;
logic [31:0] input2_branch_wire;
logic select_branch_wire;
logic [31:0] out_branch_wire;
  
//////////////// Wires for MUX_2to1_bne

  logic [31:0] input1_bne_wire;
  logic [31:0] input2_bne_wire;
logic select_bne_wire;
  logic [31:0] out_bne_wire;

//////////////// Wires for AND

logic input1_AND_wire;
logic input2_AND_wire;
logic out_AND_wire;

//////////////// Wires for AND2 for BNE
logic input1_AND2_wire;
logic input2_AND2_wire;
logic out_AND2_wire;

//////////////// Wires for JumpAddr
logic [25:0] JumpAddr_in1_wire;
logic [31:0] JumpAddr_in2_wire;
logic [31:0] JumpAddr_out_wire;

//////////////// Wires for MUX_2to1_jump  
logic [31:0] input1_jump_wire;
logic [31:0] input2_jump_wire;
logic select_jump_wire;
logic [31:0] out_jump_wire;
  
//////////////// Wires for MUX_2to1_rf    
  logic [4:0] input1_rf_wire;
  logic [4:0] input2_rf_wire;
logic select_rf_wire;
  logic [4:0] out_rf_wire;

//////////////// Wires for MUX_2to1_jr    
logic [31:0] input1_jr_wire;
logic [31:0] input2_jr_wire;
logic select_jr_wire;
logic [31:0] out_jr_wire;  
  
//////////////// Wires for MUX_2to1_sra    
logic [31:0] input1_sra_wire;
logic [31:0] input2_sra_wire;
logic select_sra_wire;
logic [31:0] out_sra_wire; 
  
 
//////////////// Wires for dff_IFID     

logic branchFlushSignal_IFID;  
  
logic [31:0] inst_in_IFID;
logic [31:0] inst_out_IFID;
logic [31:0] pc4_in_IFID;
logic [31:0] pc4_out_IFID;

    
////////////////////Wires for dff_IDEX 

 
logic [31:0] rs_data_in_IDEX;
logic [31:0] rs_data_out_IDEX;
  
logic [31:0] rt_data_in_IDEX;
logic [31:0] rt_data_out_IDEX;
  
logic [31:0] signExtended_in_IDEX;
logic [31:0] signExtended_out_IDEX;
 
  
  logic [4:0] rs_add_in_IDEX;
  logic [4:0] rs_add_out_IDEX;
  
logic [4:0] rt_add_in_IDEX;
logic [4:0] rt_add_out_IDEX;
logic [4:0] rd_add_in_IDEX;
logic [4:0] rd_add_out_IDEX;
  
logic [31:0] pc4_in_IDEX;
logic [31:0] pc4_out_IDEX;
logic [31:0] jump_add_in_IDEX;
logic [31:0] jump_add_out_IDEX;
logic [5:0] op_funct_in_IDEX;
logic [5:0] op_funct_out_IDEX;
logic [4:0] shiftamount_in_IDEX;
logic [4:0] shiftamount_out_IDEX;

logic RegWrite_in_IDEX;
logic RegWrite_out_IDEX;
logic MemWrite_in_IDEX;
logic MemWrite_out_IDEX;
logic MemRead_in_IDEX;
logic MemRead_out_IDEX;  
logic MemtoReg_in_IDEX;
logic MemtoReg_out_IDEX;
logic ALUSrc_in_IDEX;
logic ALUSrc_out_IDEX;
logic Branch_in_IDEX;
logic Branch_out_IDEX;
logic Jump_in_IDEX;
logic Jump_out_IDEX; 
logic BNE_in_IDEX;
logic BNE_out_IDEX;
logic RegDst_in_IDEX;
logic RegDst_out_IDEX;
logic JR_in_IDEX;
logic JR_out_IDEX;
logic SRA_in_IDEX;
logic SRA_out_IDEX;
logic [3:0]ALUOp_in_IDEX;
logic [3:0]ALUOp_out_IDEX;
  

////////////////////Wires for dff_EXMEM   
  

  logic [31:0] ALUResult_out_ExMem;
  logic [31:0] ALUResult_in_ExMem; 
  logic [31:0] rt_data_out_ExMem;
  logic [31:0] rt_data_in_ExMem; 
  
  
  
	
  logic [4:0] RegDstAddr_out_ExMem;
  logic [4:0] RegDstAddr_in_ExMem;
  
  logic RegWrite_out_ExMem;
  logic  RegWrite_in_ExMem;
  logic MemtoReg_out_ExMem;
  logic  MemtoReg_in_ExMem;
  
  logic MemWrite_out_ExMem;
  logic MemWrite_in_ExMem;
  logic MemRead_out_ExMem;
  logic  MemRead_in_ExMem;
  
 
  
  

////////////////////Wires for dff_MemWb   

  
   logic  [31:0]ALUResult_in_MemWb;
   logic  [31:0]MemData_in_MemWb;
   logic  [4:0]RegDstAddr_in_MemWb ;
  
   logic  RegWrite_in_MemWb ;
   logic  MemtoReg_in_MemWb ;
  
   logic  [31:0]ALUResult_out_MemWb ;
   logic  [31:0]MemData_out_MemWb ;
   logic  [4:0]RegDstAddr_out_MemWb;
   logic  RegWrite_out_MemWb ;
   logic  MemtoReg_out_MemWb ;
  
  
 
   /////////// Wires for Mux_2to1_inputPC
  
  logic [31:0] JUMP_PC_input1_wire;
  logic [31:0] Normal_PC_input2_wire;
	logic Jump_SelectSignal_3stage_wire;
  logic [31:0] Pcfeed_output_wire;
  
 /////////// Wires for Branch_decision 
  

  logic Branch_decision_wire;   // output
  
  
  
  //////////////////// Wires for Forwarding Mux For Rs
  

  logic [31:0] input1_forwarding_rs;
logic [31:0] input2_forwarding_rs;
logic [31:0] input3_forwarding_rs;
  logic [1:0] select_forwarding_rs;  
 logic [31:0] out_forwarding_rs;
 
  //////////////////// Wires for Forwarding Mux For Rs
  

logic [31:0] input1_forwarding_rt;
logic [31:0] input2_forwarding_rt;
logic [31:0] input3_forwarding_rt;
  logic [1:0] select_forwarding_rt;
logic [31:0] out_forwarding_rt;

    //////////////////// Wires for Forwarding Unit

logic [4:0] fu_rs_idex_wire;
logic [4:0] fu_rt_idex_wire;
logic fu_regwrite_signal_exmem_wire;
logic fu_regwrite_signal_memwb_wire;
logic [4:0] fu_destreg_exmem_wire;
logic [4:0] fu_destreg_memwb_wire;
  logic [1:0] forward_rs_wire;
  logic [1:0] forward_rt_wire;

  ////////////////////////// Wires for lw_stall_inst
  
  logic [31:0] input1_lwStall_inst ;
logic [31:0] input2_lwStall_inst;
logic select_lwStall_inst; 
logic [31:0] out_lwStall_inst;
  
  
  
   /////////////////////////////////// Wires for lWStall pc
  
  logic [31:0] input1_lwStall_pc;
  logic [31:0] input2_lwStall_pc;
  logic select_lwStall_pc;
  logic [31:0] out_lwStall_pc;
  
  
    ////////////////////////// Wires for pc_from_IFIDOut;
  
  logic [31:0] input1_pc_from_IFIDOut;
  logic [31:0]  input2_pc_from_IFIDOut ;

  logic select_lwStall_pc_from_IFIDOut;
  logic [31:0] out_lwStall_pc_from_IFIDOut;
  

  

    ////////////////////////// Wires for muxStall_controlSelection
  

 logic [3:0]  ALUOp_controlIN_wire;
 logic   RegWrite_controlIN_wire;
 logic   MemWrite_controlIN_wire;
 logic   MemRead_controlIN_wire;
 logic   MemtoReg_controlIN_wire;
 logic   ALUSrc_controlIN_wire; 
 logic   Branch_controlIN_wire;
 logic   Jump_controlIN_wire; 
 logic   BNE_controlIN_wire;
 logic   RegDst_controlIN_wire;
 logic   JR_controlIN_wire;
 logic   SRA_controlIN_wire;

 
 logic sw_stall_signal_IN_wire;

 logic [3:0]  ALUOp_stall_wire; 
 logic  RegWrite_stall_wire;
 logic  MemWrite_stall_wire;
 logic  MemRead_stall_wire;
 logic  MemtoReg_stall_wire;
 logic  ALUSrc_stall_wire; 
 logic  Branch_stall_wire;
 logic  Jump_stall_wire; 
 logic  BNE_stall_wire;
 logic  RegDst_stall_wire;
 logic  JR_stall_wire;
 logic  SRA_stall_wire;


  
/////////HAZARD DETECTION UNIT ////////////////////////////////
  
logic sw_stall_signal_wire;


//; my $pc=generate_base('PC','pc1');
`$pc->instantiate` (.input_pc(input_pc_wire),.output_pc(output_pc_wire),.clk(clk),.rst(rst));

//; my $next_pc=generate_base('NEXT_PC','next_pc1');
`$next_pc->instantiate` (.input_next_pc(input_next_pc_wire),.output_next_pc(output_next_pc_wire)); 

//; my $decode=generate_base('DECODE', 'decode1');
`$decode->instantiate`(.instruction(instruction_wire), .opcode(opcode_wire), .rs(rs_wire), .rt(rt_wire), .rd(rd_wire), .funct(funct_wire), .immediate(immediate_wire), .immediate_jump(immediate_jump_wire), .shamt(shamt_wire));
 
//; my $control=generate_base('Control', 'control1'); 
`$control->instantiate` ( .Control_in(Control_in_wire), .Control_jr(Control_jr_wire), .ALUOp(ALUOp_wire), .RegWrite(RegWrite_wire), .MemWrite(MemWrite_wire), .MemRead(MemRead_wire), .MemtoReg(MemtoReg_wire), .ALUSrc(ALUSrc_wire), .Branch(Branch_wire), .Jump(Jump_wire), .BNE(BNE_wire), .RegDst(RegDst_wire), .JR(JR_wire), .SRA(SRA_wire), .RegReada(RegReada_wire), .RegReadb(RegReadb_wire));

//; my $Alucontrol=generate_base('ALUControl', 'ALUControl1');
`$Alucontrol->instantiate`  ( .ALUCtrl_in(ALUCtrl_in_wire), .ALUOp_in(ALUOp_in_wire), .ALUCtrl_out(ALUCtrl_out_wire));
 
 //; my $Alu=generate_base('ALU', 'ALU1');
`$Alu->instantiate`( .ALUCtrl(ALUCtrl_wire), .ALUSrc1(ALUSrc1_wire), .ALUSrc2(ALUSrc2_wire), .ALUResult(ALUResult_wire), .zero(zero_wire));          

//; my $SignExtender=generate_base('SignExtender_16to32', 'SignExtender_16to32_1');
`$SignExtender->instantiate`(.SignExtend_in(SignExtend_in_wire), .SignExtend_out(SignExtend_out_wire));

//; my $shiftleft2=generate_base('Shiftleft2', 'Shiftleft2_1');
`$shiftleft2->instantiate` (.Shiftleft2_in(Shiftleft2_in_wire), .Shiftleft2_out(Shiftleft2_out_wire)); 
 

//; my $alu_branch=generate_base('ALU_branch', 'ALU_branch_1');
`$alu_branch->instantiate` (.ALUSrc1_branch(ALUSrc1_branch_wire), .ALUSrc2_branch(ALUSrc2_branch_wire), .ALUResult_branch(ALUResult_branch_wire));  

//; my $And=generate_base('AND', 'AND_1');
`$And->instantiate` (.input1_AND(input1_AND_wire), .input2_AND(input2_AND_wire), .out_AND(out_AND_wire));  // For be inst

//; my $And2=generate_base('AND', 'AND_2');
`$And2->instantiate` (.input1_AND(input1_AND2_wire), .input2_AND(input2_AND2_wire), .out_AND(out_AND2_wire)); // for bne inst
 
//; my $jump_addr=generate_base('JumpAddr', 'JumpAddr_1');
`$jump_addr->instantiate` (.JumpAddr_in1(JumpAddr_in1_wire), .JumpAddr_in2(JumpAddr_in2_wire), .JumpAddr_out(JumpAddr_out_wire));   
  
//; my $mux_2to1_1=generate_base('MUX_2to1', 'MUX_2to1_1');
`$mux_2to1_1->instantiate`(.input1(input1_wire), .input2(input2_wire), .select(select_wire), .out(out_wire));     
  
//; my $mux_2to1_rf_1=generate_base('MUX_2to1_rf', 'MUX_2to1_rf_1');
`$mux_2to1_rf_1->instantiate`(.input1_rf(input1_rf_wire), .input2_rf(input2_rf_wire), .select_rf(select_rf_wire), .out_rf(out_rf_wire));    

//; my $mux_2to1_ALU=generate_base('MUX_2to1', 'MUX_2to1_ALU');
`$mux_2to1_ALU->instantiate`(.input1(input1_ALU_wire), .input2(input2_ALU_wire), .select(select_ALU_wire), .out(out_ALU_wire));  
  
//; my $mux_2to1_branch=generate_base('MUX_2to1', 'MUX_2to1_branch');
`$mux_2to1_branch->instantiate`(.input1(input1_branch_wire), .input2(input2_branch_wire), .select(select_branch_wire), .out(out_branch_wire) );  

//; my $mux_2to1_bne=generate_base('MUX_2to1','MUX_2to1_bne');
`$mux_2to1_bne->instantiate` (.input1(input1_bne_wire), .input2(input2_bne_wire), .select(select_bne_wire), .out(out_bne_wire));  
  
//; my $mux_2to1_jump=generate_base('MUX_2to1','MUX_2to1_jump');
`$mux_2to1_jump->instantiate` (.input1(input1_jump_wire), .input2(input2_jump_wire), .select(select_jump_wire), .out(out_jump_wire));  

//; my $mux_2to1_jr=generate_base('MUX_2to1', 'MUX_2to1_jr');
`$mux_2to1_jr->instantiate` (.input1(input1_jr_wire), .input2(input2_jr_wire), .select(select_jr_wire), .out(out_jr_wire));
  
 
//; my $mux_2to1_sra=generate_base('MUX_2to1', 'MUX_2to1_sra'); 
`$mux_2to1_sra->instantiate`(.input1(input1_sra_wire), .input2(input2_sra_wire), .select(select_sra_wire), .out(out_sra_wire));

//; my $mux_2to1_inputPC=generate_base('MUX_2to1', 'Mux_2to1_inputPC'); 
`$mux_2to1_inputPC->instantiate` (.input1(JUMP_PC_input1_wire), .input2(Normal_PC_input2_wire), .select(Jump_SelectSignal_3stage_wire), .out(Pcfeed_output_wire));  



//;my $Dff_IFID_1 = generate_base( 'dff_IFID', 'dff_IFID_1');
`$Dff_IFID_1 -> instantiate`( .branchFlushSignal(branchFlushSignal_IFID)  ,.clk(clk), .rst(rst), .inst_in(inst_in_IFID), .inst_out(inst_out_IFID), .pc4_in(pc4_in_IFID), .pc4_out(pc4_out_IFID));  


//;my $Dff_IDEX_1 = generate_base( 'dff_IDEX', 'dff_IDEX_1');
`$Dff_IDEX_1 -> instantiate`(
                       			   
    		        .clk(clk),
                       .rst(rst), 
                       .rs_data_in(rs_data_in_IDEX), 
                       .rs_data_out(rs_data_out_IDEX), 
                       .rt_data_in(rt_data_in_IDEX), 
                       .rt_data_out(rt_data_out_IDEX), 
                       .signExtended_in(signExtended_in_IDEX),
                       .signExtended_out(signExtended_out_IDEX),
                       
                       .rs_add_in(rs_add_in_IDEX),
                       .rs_add_out(rs_add_out_IDEX),
                       
                       .rt_add_in(rt_add_in_IDEX),
                       .rt_add_out(rt_add_out_IDEX),
                       .rd_add_in(rd_add_in_IDEX), 
                       .rd_add_out(rd_add_out_IDEX),                       
                       .pc4_in(pc4_in_IDEX), 
                       .pc4_out(pc4_out_IDEX), 
                       .jump_add_in(jump_add_in_IDEX),
                       .jump_add_out(jump_add_out_IDEX),

                       
                       .op_funct_in(op_funct_in_IDEX),
                       .op_funct_out(op_funct_out_IDEX),
                       
                       .shiftamount_in(shiftamount_in_IDEX),
                       .shiftamount_out(shiftamount_out_IDEX),

                       .RegWrite_in(RegWrite_in_IDEX),
                       .RegWrite_out(RegWrite_out_IDEX),
                       .MemWrite_in(MemWrite_in_IDEX),
                       .MemWrite_out(MemWrite_out_IDEX),
                       .MemRead_in(MemRead_in_IDEX),
                       .MemRead_out(MemRead_out_IDEX),
                       .MemtoReg_in(MemtoReg_in_IDEX),
                       .MemtoReg_out(MemtoReg_out_IDEX),
                       .ALUSrc_in(ALUSrc_in_IDEX),
                       .ALUSrc_out(ALUSrc_out_IDEX),
                       .Branch_in(Branch_in_IDEX),
                       .Branch_out(Branch_out_IDEX),
                       .Jump_in(Jump_in_IDEX),
                       .Jump_out(Jump_out_IDEX),
                       .BNE_in(BNE_in_IDEX),
                       .BNE_out(BNE_out_IDEX),
                       .RegDst_in(RegDst_in_IDEX),
                       .RegDst_out(RegDst_out_IDEX),
                       .JR_in(JR_in_IDEX),
                       .JR_out(JR_out_IDEX),
                       .SRA_in(SRA_in_IDEX),
                       .SRA_out(SRA_out_IDEX),
                       .ALUOp_in(ALUOp_in_IDEX),
                       .ALUOp_out(ALUOp_out_IDEX)      
                      );


					  
					  
					  
//;my $Dff_ExMem_1 = generate_base( 'dff_ExMem', 'dff_ExMem_1');
`$Dff_ExMem_1 -> instantiate`(
  .clk(clk), 
  .rst(rst), 
  .ALUResult_out(ALUResult_out_ExMem),
  .ALUResult_in(ALUResult_in_ExMem), 
  .rt_data_out(rt_data_out_ExMem),
  .rt_data_in(rt_data_in_ExMem), 
  //.pc4_out(pc4_out_ExMem),
  //.pc4_in(pc4_in_ExMem),
  .RegDstAddr_out(RegDstAddr_out_ExMem),
  .RegDstAddr_in(RegDstAddr_in_ExMem),
  .RegWrite_out(RegWrite_out_ExMem),
  .RegWrite_in(RegWrite_in_ExMem),
  .MemtoReg_out(MemtoReg_out_ExMem),
  .MemtoReg_in(MemtoReg_in_ExMem),
  .MemWrite_out(MemWrite_out_ExMem), 
  .MemWrite_in(MemWrite_in_ExMem),
  .MemRead_out(MemRead_out_ExMem),
  .MemRead_in(MemRead_in_ExMem) 
  //.Jump_in(Jump_in_ExMem),
  //.Jump_out(Jump_out_ExMem)
);
  
  
  
//;my $Dff_MemWb_1 = generate_base( 'dff_MemWb', 'dff_MemWb_1');
`$Dff_MemWb_1 -> instantiate`(
  .clk(clk), 
  .rst(rst), 
  
  .ALUResult_in(ALUResult_in_MemWb),
  .MemData_in(MemData_in_MemWb),
  .RegDstAddr_in(RegDstAddr_in_MemWb),
  .RegWrite_in(RegWrite_in_MemWb),
  .MemtoReg_in(MemtoReg_in_MemWb),
  .ALUResult_out(ALUResult_out_MemWb),
  .MemData_out(MemData_out_MemWb),
  .RegDstAddr_out(RegDstAddr_out_MemWb),
  .RegWrite_out(RegWrite_out_MemWb),
  .MemtoReg_out(MemtoReg_out_MemWb)
  
   );
  					  
					  
//;my $branch_decision_1 = generate_base( 'Branch_decision','Branch_decision_1');
`$branch_decision_1 -> instantiate`(
  .Jr_signal(JR_out_IDEX),
  .Jump_signal(Jump_out_IDEX),
  .BNE_signal_and(out_AND2_wire),  
  .Branch_signal_and(out_AND_wire),
  .Branch_decision(Branch_decision_wire)  
); 



//;my $mux_3to1_forwarding_rs = generate_base( 'MUX_3to1_forwarding', 'MUX_3to1_forwarding_rs');
`$mux_3to1_forwarding_rs -> instantiate`(.input1_forwarding(input1_forwarding_rs), 
                                              .input2_forwarding(input2_forwarding_rs),
                                              .input3_forwarding(input3_forwarding_rs),
                                              .select_forwarding (select_forwarding_rs),
                                              .out_forwarding(out_forwarding_rs)
                                             );


//;my $mux_3to1_forwarding_rt = generate_base( 'MUX_3to1_forwarding', 'MUX_3to1_forwarding_rt');
`$mux_3to1_forwarding_rt -> instantiate`(.input1_forwarding(input1_forwarding_rt), 
                                              .input2_forwarding(input2_forwarding_rt),
                                              .input3_forwarding(input3_forwarding_rt),
                                              .select_forwarding (select_forwarding_rt),
                                              .out_forwarding(out_forwarding_rt)
                                             );


//;my $forwarding_unit_1 = generate_base( 'Forwarding_unit', 'Forwarding_unit_1');
`$forwarding_unit_1 -> instantiate`(.fu_rs_idex(fu_rs_idex_wire),
                                    .fu_rt_idex(fu_rt_idex_wire),
                                     .fu_regwrite_signal_exmem(fu_regwrite_signal_exmem_wire),
                                     .fu_regwrite_signal_memwb(fu_regwrite_signal_memwb_wire),
                                     .fu_destreg_exmem(fu_destreg_exmem_wire),
                                     .fu_destreg_memwb(fu_destreg_memwb_wire),
                                     .forward_rs(forward_rs_wire),
                                     .forward_rt(forward_rt_wire)
									 );
  
//;my $Sw_stall1 = generate_base( 'sw_stall', 'sw_stall1');
`$Sw_stall1 -> instantiate`(
    .MemRead_from_IDEX(MemRead_out_IDEX),    //  memRd from idex
    .rt_add_from_IDEX(rt_add_out_IDEX),        //rt from idex  
    .DecodeStage_rs_add(rs_wire),        //current rs
    .DecodeStage_rt_add(rt_wire),        //current rt 	
    .sw_stall_signal(sw_stall_signal_wire)  // lw stall signal   
);
  
  

//;my $mux_2to1_lwStall_inst = generate_base( 'MUX_2to1', 'MUX_2to1_lwStall_inst');
`$mux_2to1_lwStall_inst -> instantiate` (.input1(input1_lwStall_inst),
                                  .input2(input2_lwStall_inst), 
                                  .select(select_lwStall_inst),
                                  .out(out_lwStall_inst) ); 
  
//;my $mux_2to1_lwStall_pc = generate_base( 'MUX_2to1', 'MUX_2to1_lwStall_pc');
`$mux_2to1_lwStall_pc -> instantiate`(.input1(input1_lwStall_pc),
                                .input2(input2_lwStall_pc), 
                               .select(select_lwStall_pc),
                               .out(out_lwStall_pc) );
  
//;my $mux_2to1_from_IFIDOut = generate_base( 'MUX_2to1', 'MUX_2to1_from_IFIDOut');
`$mux_2to1_from_IFIDOut -> instantiate`(.input1(input1_pc_from_IFIDOut),
                                  .input2(input2_pc_from_IFIDOut),
                                  .select(select_lwStall_pc_from_IFIDOut),
                                  .out(out_lwStall_pc_from_IFIDOut) );


//;my $MuxStall_controlSelection_1 = generate_base( 'muxStall_controlSelection', 'muxStall_controlSelection_1');
`$MuxStall_controlSelection_1 -> instantiate`(
   .ALUOp_controlIN(ALUOp_controlIN_wire),
    .RegWrite_controlIN(RegWrite_controlIN_wire),
    .MemWrite_controlIN(MemWrite_controlIN_wire),
    .MemRead_controlIN(MemRead_controlIN_wire),
    .MemtoReg_controlIN(MemtoReg_controlIN_wire),
    .ALUSrc_controlIN(ALUSrc_controlIN_wire),
    .Branch_controlIN(Branch_controlIN_wire),
    .Jump_controlIN(Jump_controlIN_wire),
    .BNE_controlIN(BNE_controlIN_wire),
    .RegDst_controlIN(RegDst_controlIN_wire),
    .JR_controlIN(JR_controlIN_wire),
    .SRA_controlIN(SRA_controlIN_wire),
    
    .sw_stall_signal_IN(sw_stall_signal_IN_wire),
    
    .ALUOp_stall(ALUOp_stall_wire),
    .RegWrite_stall(RegWrite_stall_wire),
    .MemWrite_stall(MemWrite_stall_wire),
    .MemRead_stall(MemRead_stall_wire),
    .MemtoReg_stall(MemtoReg_stall_wire),
    .ALUSrc_stall(ALUSrc_stall_wire),
    .Branch_stall(Branch_stall_wire),
    .Jump_stall(Jump_stall_wire),
    .BNE_stall(BNE_stall_wire),
    .RegDst_stall(RegDst_stall_wire),
    .JR_stall(JR_stall_wire),
    .SRA_stall(SRA_stall_wire)
  );							  
								  
			
 
////////////////////////////////// Wire Assignment ////////////////


/////////////////// Mux_2to1_inputPC Input Connections
assign JUMP_PC_input1_wire = out_jump_wire;  //comming from exe stage withput ff //pc4_out_ExMem ;
assign Normal_PC_input2_wire = output_next_pc_wire;
assign Jump_SelectSignal_3stage_wire = Branch_decision_wire; //comming from exe stage withput ff //Jump_out_ExMem;
  

  
//////////////// PC Input Connections
// No need PC is given in the PC Module itself
assign input_pc_wire = out_lwStall_pc_from_IFIDOut; ///Pcfeed_output_wire; //ToPc_wire_out; //pc4_out_ExMem; // out_jump_wire; 




  
/////////////// Inst Mem Input Connections 
assign iCacheReadAddr=output_pc_wire; //output_pc_wire;
  
/////////////// NEXT_PC Input Connections 
assign input_next_pc_wire=output_pc_wire;

////// Decode Input Connections
assign instruction_wire = inst_out_IFID ;
  
///// RF Input Connections
  
  assign rfWriteData_p0 = out_wire; // from last mux
  assign rfReadAddr_p0 = rs_wire;
  assign rfReadAddr_p1 = rt_wire;
  assign rfWriteAddr_p0 = RegDstAddr_out_MemWb; // from memWB ff 5bit
  assign rfWriteEn_p0 = RegWrite_out_MemWb; //control signal from memWB ff out 
  assign rfReadEn_p0 = RegReada_wire;
  assign rfReadEn_p1 = RegReadb_wire;

////  Control Input Connections
assign Control_in_wire = opcode_wire;
assign Control_jr_wire = funct_wire;

///// ALUControl Input Connections
assign ALUCtrl_in_wire = op_funct_out_IDEX; //funct_wire; opcode_wire   //////////////////////////////////////////////////////////////////
assign ALUOp_in_wire = ALUOp_out_IDEX; //from IDEX ff 

///// ALU Input Connections
assign ALUCtrl_wire = ALUCtrl_out_wire;
assign ALUSrc1_wire = out_sra_wire;     // from sra mux         
assign ALUSrc2_wire = out_ALU_wire;          //   from ALU mux output
             
////// Data Memory Input Connections
assign dCacheAddr = ALUResult_out_ExMem; // from exmem sw 
assign dCacheWriteData = rt_data_out_ExMem; //rt from ff EXMEM
assign dCacheWriteEn = MemWrite_out_ExMem; // from ExMem FF 
assign dCacheReadEn =  MemRead_out_ExMem; // from Exmem ff
             
////// Last Mux Input Connections
assign input1_wire = MemData_out_MemWb;
assign input2_wire = ALUResult_out_MemWb;  // from memWB
assign select_wire = MemtoReg_out_MemWb;  // control signal

////// Sign Extender Input Connections
assign SignExtend_in_wire = immediate_wire;  

////// Mux_ALU Input Connections
assign input1_ALU_wire = signExtended_out_IDEX; // IDEXFF
assign input2_ALU_wire = out_forwarding_rt; // from forwarding rt // rt_data_out_IDEX; // from ExMem////////// FF rt wire 
assign select_ALU_wire = ALUSrc_out_IDEX; // from IDEX ff
  

////// Shiftleft2   Input Connections  
  
assign Shiftleft2_in_wire = signExtended_out_IDEX; // IDEX FF
  
////// ALU_branch   Input Connections  
  
assign ALUSrc1_branch_wire = pc4_out_IDEX;  // It should come from IDEX 
assign ALUSrc2_branch_wire = Shiftleft2_out_wire;
  
////// MUX_2to1_branch Input Connections    
  
assign input1_branch_wire = ALUResult_branch_wire; //BranchAddr_out_ExMem; //ALUResult_branch_wire; // from exmem
assign input2_branch_wire = pc4_out_IDEX; //IDEX 
assign select_branch_wire = out_AND_wire;  
  
//////////////// MUX_2to1_bne Input Connections   

assign input1_bne_wire = ALUResult_branch_wire; //ALUResult_branch_wire;  // from ex/mem
assign input2_bne_wire = out_branch_wire;
assign select_bne_wire = out_AND2_wire;

////// AND Input Connections   

assign input1_AND_wire = Branch_out_IDEX; // exmem remove 
assign input2_AND_wire = zero_wire; // exmem remove
  
////// AND2 Input Connections for BNE connection  

assign input1_AND2_wire = BNE_out_IDEX; // exmem remove
assign input2_AND2_wire = zero_wire; // exmem remove

  
////// JumpAddr Input Connections     

assign JumpAddr_in1_wire = immediate_jump_wire;
assign JumpAddr_in2_wire = pc4_out_IFID;  // in 2nd stage 

//////  MUX_2to1_jump Input Connections       
  
assign input1_jump_wire = jump_add_out_IDEX; // JumpAddr_out_wire; //JumpAddr_out_wire; // calculated add 
assign input2_jump_wire = out_jr_wire; //out_jr_wire;
assign select_jump_wire = Jump_out_IDEX; // control 
  
//////  MUX_2to1_rf Input Connections  // RegDst Mux     

assign input1_rf_wire = rd_add_out_IDEX;// selecting default rd  
assign input2_rf_wire = rt_add_out_IDEX; // selecting fro lw and immediate 
assign select_rf_wire = RegDst_out_IDEX; //RegDst_wire; //from idex ff 

//////  MUX_2to1_jr Input Connections       

assign input1_jr_wire = out_sra_wire;
assign input2_jr_wire = out_bne_wire;
assign select_jr_wire = JR_out_IDEX; //from exmem ff for jr descion 
  
//////  MUX_2to1_sra Input Connections       

assign input1_sra_wire = shiftamount_out_IDEX; // 
assign input2_sra_wire = out_forwarding_rs; // from forwarding rs   //
assign select_sra_wire = SRA_out_IDEX;  
  

//////  IFID Input Connections       

assign branchFlushSignal_IFID=  Branch_decision_wire;  // from branch taken/not signal
assign inst_in_IFID = out_lwStall_inst; //iCacheReadData; /// from stall mux
assign pc4_in_IFID = out_lwStall_pc; //output_next_pc_wire;  // from stall mux

/////////////  IDEX Input Connections    
  

assign rs_data_in_IDEX = rfReadData_p0; // from mem 
assign rt_data_in_IDEX = rfReadData_p1;
assign signExtended_in_IDEX = SignExtend_out_wire;
assign rs_add_in_IDEX = rs_wire; // from decoder
assign rt_add_in_IDEX = rt_wire; // from decoder 
assign rd_add_in_IDEX = rd_wire; // from decoder
assign pc4_in_IDEX = pc4_out_IFID;
assign jump_add_in_IDEX = JumpAddr_out_wire;
assign op_funct_in_IDEX =funct_wire;
assign shiftamount_in_IDEX = shamt_wire;


assign RegWrite_in_IDEX = RegWrite_stall_wire;
assign MemWrite_in_IDEX =MemWrite_stall_wire;
assign MemRead_in_IDEX = MemRead_stall_wire;
assign MemtoReg_in_IDEX = MemtoReg_stall_wire;
assign ALUSrc_in_IDEX = ALUSrc_stall_wire;
assign Branch_in_IDEX = Branch_stall_wire;
assign Jump_in_IDEX = Jump_stall_wire; 
assign BNE_in_IDEX = BNE_stall_wire;
assign RegDst_in_IDEX =RegDst_stall_wire;
assign JR_in_IDEX = JR_stall_wire;
assign SRA_in_IDEX = SRA_stall_wire;
assign ALUOp_in_IDEX = ALUOp_stall_wire;
  

///////////////////////////////ExMem//////////

assign ALUResult_in_ExMem = ALUResult_wire;
assign rt_data_in_ExMem = rt_data_out_IDEX; 
//assign pc4_in_ExMem = out_jump_wire; connecting directly to PC mux // removed due to lint errors
//assign BranchAddr_in_ExMem = ALUResult_branch_wire; // branch ALU 
assign RegDstAddr_in_ExMem = out_rf_wire;


assign RegWrite_in_ExMem = RegWrite_out_IDEX;
assign MemWrite_in_ExMem = MemWrite_out_IDEX;
assign MemRead_in_ExMem = MemRead_out_IDEX; 
assign MemtoReg_in_ExMem = MemtoReg_out_IDEX;

//assign Jump_in_ExMem= Branch_decision_wire; //desicion of all signal; conecting it directly to IDIF anf IDEX 
  
   

///////////////////////memWB////////////////    
  
assign ALUResult_in_MemWb = ALUResult_out_ExMem;
assign MemData_in_MemWb = dCacheReadData;
assign RegDstAddr_in_MemWb = RegDstAddr_out_ExMem;


assign RegWrite_in_MemWb = RegWrite_out_ExMem;
assign MemtoReg_in_MemWb = MemtoReg_out_ExMem;

 
  
  
  
  //////////////////// Forwarding Mux For Rs
  

assign input1_forwarding_rs = rs_data_out_IDEX; //out_sra_wire; // from sra mux
assign  input2_forwarding_rs = ALUResult_out_ExMem; // from exmem ALu result
  
assign input3_forwarding_rs = out_wire; //  from last mux
assign select_forwarding_rs = forward_rs_wire; //forward_rs_wire

 
  //////////////////// Forwarding Mux For Rt
  

assign  input1_forwarding_rt = rt_data_out_IDEX; // idex ff
assign input2_forwarding_rt = ALUResult_out_ExMem; // from exmem ALu result
assign input3_forwarding_rt = out_wire; //  from last mux
assign select_forwarding_rt = forward_rt_wire;


  
  //////////////////// Forwarding Unit

assign fu_rs_idex_wire = rs_add_out_IDEX;
assign fu_rt_idex_wire = rt_add_out_IDEX;
assign fu_regwrite_signal_exmem_wire = RegWrite_out_ExMem;
assign fu_regwrite_signal_memwb_wire = RegWrite_out_MemWb;
assign fu_destreg_exmem_wire = RegDstAddr_out_ExMem;
assign fu_destreg_memwb_wire = RegDstAddr_out_MemWb;
  


  ///////////////////////////////// No Wires assignment for Hazard Detection unit ////////////////////////
  
  
    ////////////////////////// Wires for lw_stall_inst
  
assign input1_lwStall_inst =inst_out_IFID ; // ifid out
assign input2_lwStall_inst= iCacheReadData; // instruction iCacheReadData;
assign select_lwStall_inst = sw_stall_signal_wire; // stall control

  
  

  
   /////////////////////////////////// Wires for lWStall pc
  
assign input1_lwStall_pc = pc4_out_IFID; // previous PC
assign input2_lwStall_pc = output_next_pc_wire; // normal pc+4
assign select_lwStall_pc= sw_stall_signal_wire; // stall control

  
  
    ////////////////////////// Wires for pc_from_IFIDOut////////////
  
assign input1_pc_from_IFIDOut= pc4_out_IFID;// stall 
assign input2_pc_from_IFIDOut = Pcfeed_output_wire; // from mux define jump add or normalPC
assign select_lwStall_pc_from_IFIDOut= sw_stall_signal_wire;
  
  
    ////////////////////////// Wires for muxStall_controlSelection


assign    ALUOp_controlIN_wire = ALUOp_wire ;
assign   RegWrite_controlIN_wire =RegWrite_wire;
assign    MemWrite_controlIN_wire = MemWrite_wire;
assign    MemRead_controlIN_wire = MemRead_wire;
assign    MemtoReg_controlIN_wire = MemtoReg_wire;
assign    ALUSrc_controlIN_wire = ALUSrc_wire; 
assign    Branch_controlIN_wire = Branch_wire;
assign    Jump_controlIN_wire = Jump_wire; 
assign    BNE_controlIN_wire = BNE_wire;
assign    RegDst_controlIN_wire= RegDst_wire;
assign    JR_controlIN_wire = JR_wire;
assign    SRA_controlIN_wire= SRA_wire;
assign sw_stall_signal_IN_wire = sw_stall_signal_wire;
   
////////////////////////////////// Displaying results///////////////////////////////////////////////

//assign Out = out_wire; // output of the final Mux alloted to Out delete it before submission

//endmodule


always @ (posedge clk)
begin
$display("pc_in = %d   pc_out = %d  instruction = %b", output_pc_wire, input_pc_wire, instruction_wire);
end





endmodule: `mname`			



