///////////////////////////////////// Forwarding Control unit ////////////////////////////////////////////////

// Forwarding_unit.vp
//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//;
module `mname`  (
  input logic [4:0] fu_rs_idex, 
  input logic [4:0] fu_rt_idex,
  input logic fu_regwrite_signal_exmem,
  input logic fu_regwrite_signal_memwb,
  input logic [4:0] fu_destreg_exmem,
  input logic [4:0] fu_destreg_memwb,
  output logic [1:0] forward_rs,
  output logic [1:0] forward_rt
);

      
  always_comb
    begin
	begin 
      if (fu_regwrite_signal_exmem & (fu_destreg_exmem != 0) & (fu_rs_idex == fu_destreg_exmem) )
        forward_rs = 2'b01;
      else if (fu_regwrite_signal_memwb & (fu_destreg_memwb != 0) & (fu_rs_idex == fu_destreg_memwb))
        forward_rs = 2'b10;
      else 
        forward_rs = 2'b00;
      end
    end
  
    always_comb
    begin
      begin
       if (fu_regwrite_signal_exmem & (fu_destreg_exmem != 0) & (fu_rt_idex == fu_destreg_exmem) )
            
        forward_rt = 2'b01;     
       else if (fu_regwrite_signal_memwb & (fu_destreg_memwb != 0)& (fu_rt_idex == fu_destreg_memwb))
         forward_rt = 2'b10;
      else 
        forward_rt = 2'b00;
      end      
     
  end            
                
                
                
      /*
      begin 
       // if ((fu_rs_idex == fu_destreg_exmem) && fu_regwrite_signal_exmem && (fu_destreg_exmem != 0) )
        if (fu_regwrite_signal_exmem // exmem check if signal is high
          && (fu_destreg_exmem != 0) // exmem check if dest reg is not zero
          && (fu_rs_idex == fu_destreg_exmem) ) // idex/memwb check if the required source is equal to the one obtained in exmem
          
        forward_rs = 2'b01;
        
        
        // else if ((fu_rs_idex == fu_destreg_memwb) && fu_regwrite_signal_memwb && (fu_destreg_memwb != 0) )
       //  else if (fu_regwrite_signal_memwb && (fu_destreg_memwb != 0) && (fu_rs_idex == fu_destreg_memwb) All conditions makes sense
        
        else if (fu_regwrite_signal_memwb  // memwb check if regwrite signal is high
          && (fu_destreg_memwb != 0) // memeb check if dest reg is not zero
          && (fu_rs_idex == fu_destreg_memwb) // idex/memwb check if the required source is equal to the one obtained in memwb
          && !(fu_regwrite_signal_exmem && (fu_destreg_exmem != 0) && (fu_rs_idex == fu_destreg_exmem)))
          
        forward_rs = 2'b10;
      else 
        forward_rs = 2'b00;
      end

        begin
        // if  (fu_rt_idex == fu_destreg_exmem)  && fu_regwrite_signal_exmem && (fu_destreg_exmem != 0))
          if (fu_regwrite_signal_exmem 
            && (fu_destreg_exmem != 0)
            && (fu_rt_idex == fu_destreg_exmem) )
            
        forward_rt = 2'b01;
          
         // else if ((fu_rt_idex == fu_destreg_memwb)  && fu_regwrite_signal_memwb && (fu_destreg_memwb != 0) )
          
          else if (fu_regwrite_signal_memwb
            && (fu_destreg_memwb != 0)
            && (fu_rt_idex == fu_destreg_memwb)
            && !(fu_regwrite_signal_exmem  && (fu_destreg_exmem != 0) && (fu_rt_idex == fu_destreg_exmem)))
            
        forward_rt = 2'b10;
      else 
        forward_rt = 2'b00;
      end
         */   
   

endmodule: `mname`
