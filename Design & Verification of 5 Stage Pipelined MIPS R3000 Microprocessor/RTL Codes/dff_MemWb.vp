/////////////////////////////////////////////////MemWb///////////////////////////////////////

//; use strict;
//; use warnings FATAL=>qw(all);
//; use diagnostics;
//;


module `mname` (
  input logic clk, 
  input logic rst, 
  
  input logic  [31:0]ALUResult_in,
  input logic  [31:0]MemData_in,
  input logic  [4:0]RegDstAddr_in,
  input logic  RegWrite_in,
  input logic  MemtoReg_in,
  
  output logic  [31:0]ALUResult_out,
  output logic  [31:0]MemData_out,
  output logic  [4:0]RegDstAddr_out,
  output logic  RegWrite_out,
  output logic  MemtoReg_out
  
   );

  always_ff @(posedge clk or negedge rst)
  begin
    if (~rst) 
    begin
   ALUResult_out <= 32'd0 ;
   MemData_out <= 32'd0;
   RegDstAddr_out <= 5'd0;
   RegWrite_out <= 1'd0 ;
   MemtoReg_out <= 1'd0 ;
    end 
    else begin
	ALUResult_out <= ALUResult_in;
    MemData_out <= MemData_in ;
    RegDstAddr_out <= RegDstAddr_in ;
    RegWrite_out <= RegWrite_in ;
    MemtoReg_out <= MemtoReg_in ;   
      
    end
  end
endmodule: `mname`
