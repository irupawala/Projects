
////////////////////////////DECODE///////////////////////////

// DECODE.vp 
//; use POSIX;
//; use strict;
//; use warnings FATAL => qw(all);
//; use diagnostics;

// Decode logic 
module `mname` ( 
  input logic [31:0] instruction,
  output logic [5:0] opcode, // opcode
  output logic [4:0] rs, // s_reg number
  output logic [4:0] rt, // t_reg number
  output logic [4:0] rd,  // d_reg number
  output logic [5:0] funct,
  output logic [15:0] immediate,
  output logic [25:0] immediate_jump,
  output logic [4:0] shamt
); 
  
  always_comb
  begin
  opcode = instruction[31:26];
  rs = instruction[25:21];
  rt = instruction[20:16];
  rd = instruction[15:11];
  funct = instruction[5:0];
  immediate = instruction[15:0];
  immediate_jump = instruction[25:0];
  shamt = instruction[10:6];
  end
endmodule: `mname`
