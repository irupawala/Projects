

//////////////////////////////////////////////////Control////////////////////////////////
// Control 

// Control.vp 
//; use POSIX;
//; use strict;
//; use warnings FATAL => qw(all);
//; use diagnostics;
  
module `mname` (
  input logic [5:0] Control_in, // opcode bit  //no change
  input logic [5:0] Control_jr,
  output logic  [3:0] ALUOp, // increase bits
  output logic RegWrite,
  output logic MemWrite,
  output logic MemRead,
  output logic MemtoReg,
  output logic ALUSrc,
  output logic Branch,
  output logic Jump,
  output logic BNE,
  output logic RegDst,
  output logic JR,
  output logic SRA,
  output logic RegReada,
  output logic RegReadb
);
  
  always_comb
    begin
      case(Control_in)
        6'b000000:  // R type
          if (Control_jr == 6'b001000) // jr
      		begin
          ALUOp = 4'b1111; // decide operation for ALU 
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b1;
          ALUSrc = 1'b1; // remember to modify
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b1;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;
              
            end
            
        else if (Control_jr == 6'b000011) // sra
              
          begin
            
          ALUOp = 4'b0010;
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0;
          Branch = 1'b0;
          Jump = 1'b0;
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b1;
          RegReada = 1'b1;
          RegReadb = 1'b1;            
          end        
   
         else            //// Other R type
           
          begin
          ALUOp = 4'b0010; // decide operation for ALU
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0;
          Branch = 1'b0;
          Jump = 1'b0;
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0; // remember to change the jr after 
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;            
          end
           
  
            
            
      6'b001000: //addi
        begin
          ALUOp = 4'b0100; // decide operation for ALU addi=0100
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b1;
          Branch = 1'b0;
          Jump = 1'b0;
          BNE = 1'b0;
          RegDst = 1'b0;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
        
      6'b001100: // andi
        begin
          ALUOp = 4'b0101; // decide operation for ALU addi=0101
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b1; 
          Branch = 1'b0;
          Jump = 1'b0;
          BNE = 1'b0;
          RegDst = 1'b0;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b001101: // ori
        begin
          ALUOp = 4'b0110; // decide operation for ALU addi=0110
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b1; 
          Branch = 1'b0;
          Jump = 1'b0;
          BNE = 1'b0;
          RegDst = 1'b0;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b001110: // xori
        begin
          ALUOp = 4'b0111; // decide operation for ALU addi=0111
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b1;
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b0;
          JR = 1'b0;
          SRA = 1'b0; 
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b001010: // slti
        begin
          ALUOp = 4'b1000; // decide operation for ALU addi=1000
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b1; 
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b0;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b000100: // beq
        begin
          ALUOp = 4'b1001; // decide operation for ALU
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0; 
          Branch = 1'b1;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b000111: // bgtz
        begin
          ALUOp = 4'b1010; // decide operation for ALU
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0; 
          Branch = 1'b1;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b000101: // bne
        begin
          ALUOp = 4'b1011; // decide operation for ALU
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0; // 0 means reg or immediate 
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b1; // asserted when not equal to zero as we are using the nand gate ahead
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b101011: // sw only ALUop set other we have to do,  and we have to check that we really need it here
        begin
          ALUOp = 4'b1100; // decide operation for ALU
          RegWrite = 1'b0;
          MemWrite = 1'b1;
          MemRead = 1'b0;
          MemtoReg = 1'b1;
          ALUSrc = 1'b1; 
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end
      6'b100011: // lw  only ALUop set other we have to do, and we have to check that we really need it here 
        begin
          ALUOp = 4'b1101; // decide operation for ALU
          RegWrite = 1'b1;
          MemWrite = 1'b0;
          MemRead = 1'b1;
          MemtoReg = 1'b1;
          ALUSrc = 1'b1; 
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b0; // 
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;          
        end  
        
		6'b000010: //J
             begin
          ALUOp = 4'b1111; // jump does not access the alu 
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0; 
          Branch = 1'b0;
          Jump = 1'b1; 
          BNE = 1'b0;
          RegDst = 1'b1;
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b1;
          RegReadb = 1'b1;               
          end
        default: 
          begin
         ALUOp = 4'b1111; 
          RegWrite = 1'b0;
          MemWrite = 1'b0;
          MemRead = 1'b0;
          MemtoReg = 1'b0;
          ALUSrc = 1'b0; 
          Branch = 1'b0;
          Jump = 1'b0; 
          BNE = 1'b0;
          RegDst = 1'b1; /// 
          JR = 1'b0;
          SRA = 1'b0;
          RegReada = 1'b0;
          RegReadb = 1'b0;  
         
          end
      endcase
    
    end

endmodule: `mname`