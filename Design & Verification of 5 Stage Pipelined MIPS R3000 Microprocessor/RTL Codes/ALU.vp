
////////////////////////////////////////ALU/////////////////////////////////////

// ALU.vp 
//; use POSIX;
//; use strict;
//; use warnings FATAL => qw(all);
//; use diagnostics;

module `mname`  (
  input logic [4:0] ALUCtrl ,
 input logic [31:0] ALUSrc1,
 input logic [31:0] ALUSrc2,
  output logic [31:0] ALUResult,
 output logic zero
);

always_comb
 begin 

   case (ALUCtrl)
     5'b00001: ALUResult = ALUSrc1 + ALUSrc2; // ADD
     5'b00010: ALUResult = ALUSrc1 - ALUSrc2; // SUB
	 5'b00100: ALUResult = ALUSrc1 | ALUSrc2; // BITWISE OR
	 5'b00011: ALUResult = ALUSrc1 & ALUSrc2; // BITWISE AND
	 5'b00110: ALUResult = (ALUSrc1 < ALUSrc2) ? 32'd1:32'd0; // SLT 
	 5'b11001: ALUResult = ~(ALUSrc1 | ALUSrc2); // NOR
	// 5'b00110: ALUResult = ALUSrc1 - ALUSrc2; // JR 
	 5'b00101: ALUResult = ALUSrc1 ^ ALUSrc2; // XOR
     
     5'b01000: ALUResult = ALUSrc1 + ALUSrc2; // ADDI
     5'b01001: ALUResult = ALUSrc1 & ALUSrc2; // ANDI
	 5'b01010: ALUResult = ALUSrc1 | ALUSrc2; //ORI 01011
     5'b01011: ALUResult = ALUSrc1 ^ ALUSrc2; //XORI
     5'b01100: ALUResult = (ALUSrc1 < ALUSrc2) ? 32'd1:32'd0; //SLTI  01100
     
	 5'b01101: ALUResult = (ALUSrc1==ALUSrc2)? 32'd0 : 32'd1; //BEQ Zero means branch take place
     5'b01110: ALUResult = (ALUSrc1>ALUSrc2)? 32'd0 : 32'd1; //BGTZ Zero means branch take place
     5'b01111: ALUResult = (ALUSrc1!=ALUSrc2)? 32'd0 : 32'd1; //BNE Zero means branch take place
         
     5'b10000: ALUResult = ALUSrc1 + ALUSrc2; // LW
     5'b10001: ALUResult = ALUSrc1 + ALUSrc2; // SW
     5'b11010: ALUResult = $signed(ALUSrc2) >>> ALUSrc1; // SRA      //shift amount is coming from ALUSrc1, input >>> sh_amt $signed(registers[0][0]) >>> 2;
     default: ALUResult = 32'b1111_1111_1111_1111_1111_1111_1111_1111;
              
   endcase
   
   if(ALUResult==0)
     zero=1;
   else
     zero=0;
 end
  
     
   //////// Logic for Enabling zero bit on ALUResult equal to 0
endmodule: `mname`
