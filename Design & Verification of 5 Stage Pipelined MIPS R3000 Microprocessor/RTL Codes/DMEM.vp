/////////////////////////////////////Data Memory //////////////////////////////
     
//dcache.vp
//; use POSIX;
//; use strict;
//; use warnings FATAL => qw(all);
//; use diagnostics;



module `mname` (
  output logic [31:0] dCacheReadData,
  input logic [31:0] dCacheWriteData,
  input logic [31:0] dCacheAddr,
  input logic dCacheWriteEn, 
  input logic dCacheReadEn,
  input logic clk,
  input logic rst
	);  


	logic [31:0] dcache [0:99999]; // 1000000 registers of size 32 bits
	// int i;

  always@(posedge clk or negedge rst)
    if(!rst)
      begin
        
        dcache[1]<=32'h 00_f0_f0_f0;
        dcache[2]<= 32'h 00_0f_0f_0f;
       dcache[4]<= 32'h 00_00_00_0A;
        dcache[8]<= 32'd 4000; 
        dcache[16] <= 32'd4000; 
        
      
      end
      else if (clk)
        begin
			begin
     	    	if(dCacheWriteEn) begin
		   		dcache[dCacheAddr] <= dCacheWriteData;
	    	end
		end
      end
	always_comb
              dCacheReadData = dCacheReadEn ? dcache[dCacheAddr] : 32'b0;
			  
			  
			  
endmodule: `mname`